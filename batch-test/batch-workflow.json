{
	"name": "card_statistics_workflow",
	"category": "statistics",
	"alias": "sqoop-hive-workflow",
	"description": "Get card stastics",
	"appName": "wfs.ubrxkt4e7bjo",
	"xml": "<workflow-app xmlns='uri:oozie:workflow:0.5' name='hive-sqoop'> <start to='hive-node'/> <action name='hive-node'> <hive xmlns='uri:oozie:hive-action:0.6'> <job-tracker>${jobTracker}</job-tracker> <name-node>${nameNode}</name-node> <configuration> <property> <name>mapred.job.queue.name</name> <value>${queueName}</value> </property> </configuration> <query> CREATE EXTERNAL TABLE IF NOT EXISTS CARD_HISTORY ( TRANSACTION_DATE STRING, TRANSACTION_ID STRING, TRANSACTION_TYPE STRING, CARD_NUMBER STRING, CARD_OWNER STRING, EXPIRE_DATE STRING, AMOUNT INT, MERCHANT_ID STRING, LOCATION_X INT, LOCATION_Y INT ) COMMENT 'Card History Table' ROW FORMAT DELIMITED FIELDS TERMINATED BY ',' LOCATION '${cardHistory}'; CREATE EXTERNAL TABLE IF NOT EXISTS USERS ( USER_ID STRING, USER_NAME STRING, AGE INT, SEX STRING, ADDRESS STRING ) COMMENT 'User Table' ROW FORMAT DELIMITED FIELDS TERMINATED BY ',' LOCATION '${user}'; CREATE EXTERNAL TABLE IF NOT EXISTS MERCHANT ( MERCHANT_ID STRING, MERCHANT_NAME STRING, BUSINESS_TYPE STRING ) COMMENT 'Merchant Table' ROW FORMAT DELIMITED FIELDS TERMINATED BY ',' LOCATION '${merchant}'; CREATE TABLE IF NOT EXISTS STATISTICS_BY_BUSINESS_TYPE( BUSINESS_TYPE STRING, TOTAL_AMOUNT INT ) COMMENT 'Statistics per Business Type' ROW FORMAT DELIMITED FIELDS TERMINATED BY ','; CREATE TABLE IF NOT EXISTS STATISTICS_BY_SEX( SEX STRING, TOTAL_AMOUNT INT ) COMMENT 'Statistics per User Sex' ROW FORMAT DELIMITED FIELDS TERMINATED BY ','; CREATE TABLE IF NOT EXISTS STATISTICS_BY_AGE( AGE INT, TOTAL_AMOUNT INT ) COMMENT 'Statistics per Age' ROW FORMAT DELIMITED FIELDS TERMINATED BY ','; INSERT INTO TABLE STATISTICS_BY_BUSINESS_TYPE SELECT M.BUSINESS_TYPE, SUM(C.AMOUNT) AS TOTAL_AMOUNT FROM CARD_HISTORY C JOIN MERCHANT M ON (C.MERCHANT_ID = M.MERCHANT_ID) GROUP BY M.BUSINESS_TYPE; INSERT INTO TABLE STATISTICS_BY_SEX SELECT U.SEX, SUM(C.AMOUNT) AS TOTAL_AMOUNT FROM CARD_HISTORY C JOIN USERS U ON (C.CARD_OWNER = U.USER_ID) GROUP BY U.SEX; INSERT INTO TABLE STATISTICS_BY_AGE SELECT U.AGE, SUM(C.AMOUNT) AS TOTAL_AMOUNT FROM CARD_HISTORY C JOIN USERS U ON (C.CARD_OWNER = U.USER_ID) GROUP BY U.AGE; </query> </hive> <ok to='fork'/> <error to='fail'/> </action> <fork name='fork'> <path start='sqoop-node-1'/> <path start='sqoop-node-2'/> <path start='sqoop-node-3'/> </fork> <action name='sqoop-node-1'> <sqoop xmlns='uri:oozie:sqoop-action:0.4'> <job-tracker>${jobTracker}</job-tracker> <name-node>${nameNode}</name-node> <configuration> <property> <name>mapred.job.queue.name</name> <value>${queueName}</value> </property> </configuration> <command>export --connect jdbc:mariadb://localhost:3306/batch --driver org.mariadb.jdbc.Driver --username root --password hadoop --table STATISTICS_BY_BUSINESS_TYPE --export-dir /apps/hive/warehouse/statistics_by_business_type</command> </sqoop> <ok to='join'/> <error to='fail'/> </action> <action name='sqoop-node-2'> <sqoop xmlns='uri:oozie:sqoop-action:0.4'> <job-tracker>${jobTracker}</job-tracker> <name-node>${nameNode}</name-node> <configuration> <property> <name>mapred.job.queue.name</name> <value>${queueName}</value> </property> </configuration> <command>export --connect jdbc:mariadb://localhost:3306/batch --driver org.mariadb.jdbc.Driver --username root --password hadoop --table STATISTICS_BY_SEX --export-dir /apps/hive/warehouse/statistics_by_sex</command> </sqoop> <ok to='join'/> <error to='fail'/> </action> <action name='sqoop-node-3'> <sqoop xmlns='uri:oozie:sqoop-action:0.4'> <job-tracker>${jobTracker}</job-tracker> <name-node>${nameNode}</name-node> <configuration> <property> <name>mapred.job.queue.name</name> <value>${queueName}</value> </property> </configuration> <command>export --connect jdbc:mariadb://localhost:3306/batch --driver org.mariadb.jdbc.Driver --username root --password hadoop --table STATISTICS_BY_AGE --export-dir /apps/hive/warehouse/statistics_by_age</command> </sqoop> <ok to='join'/> <error to='fail'/> </action> <join name='join' to='end'/> <kill name='fail'> <message>Hive failed, error message[${wf:errorMessage(wf:lastErrorNode())}]</message> </kill> <end name='end'/> </workflow-app>",
	"libPath": null,
	"useSystemLibPath": true
}
